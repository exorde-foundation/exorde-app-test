{"version":3,"sources":["assets/img/logo.png","app/constants/index.ts","app/services/ConfigCatClient.ts","app/hooks/useIsFeatureActivated.ts","pages/maintenance/Maintenance.tsx","app/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","FEATURES","ConfigCatClient","sdkKey","client","this","configcat","featureName","getValueAsync","instance","useIsFeatureActivated","useState","isFeatureActivated","setIsFeatureActivated","configCatSdkKey","process","REACT_APP_CONFIGCAT_SDK_KEY","configCatClient","getInstance","useEffect","a","getFeature","feature","handleFeatureStatus","MaintenancePage","className","src","logo","alt","App","loginFeature","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,kC,iLCC9BC,EACJ,Q,uDCAHC,E,WAKJ,WAAoBC,GAAiB,yBAF7BC,YAE4B,EAClCC,KAAKD,OAASE,IAAuBH,G,gGAUfI,G,0FACfF,KAAKD,OAAOI,cAAcD,I,2IARTJ,GAIxB,OAHKD,EAAgBO,WACnBP,EAAgBO,SAAW,IAAIP,EAAgBC,IAE1CD,EAAgBO,a,KAbrBP,EACWO,c,EAoBFP,QCFAQ,EAlBe,SAACH,GAAyB,IAAD,EACDI,oBAAS,GADR,mBAC9CC,EAD8C,KAC1BC,EAD0B,KAE/CC,EAAkBC,mHAAYC,4BAC9BC,EAAkBH,GAAmBZ,EAAgBgB,YAAYJ,GAYvE,OAVAK,qBAAU,WAAM,4CACd,4BAAAC,EAAA,0DACMH,EADN,gCAE0BA,EAAgBI,WAAWd,GAFrD,OAEUe,EAFV,OAGIT,EAAsBS,GAH1B,4CADc,uBAAC,WAAD,wBAOdC,KACC,CAACN,EAAiBV,IAEdK,G,iBCLMY,G,MATS,kBACtB,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,qFCWSC,EAZH,WACV,IAAMC,EAAepB,EAAsBT,GAC3C,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8B,KAAK,IAAIC,UAAWR,IAC1BM,GAAgB,kBAAC,IAAD,CAAOG,OAAK,EAACF,KAAK,SAASC,UAAWR,OCD3CU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCXnCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2b8b62fd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.fd6cc16a.png\";","/* eslint-disable import/prefer-default-export */\nexport const FEATURES = {\n  LOGIN: 'login',\n};\n","import * as configcat from 'configcat-js';\n\nclass ConfigCatClient {\n  private static instance: any;\n\n  private client: any;\n\n  private constructor(sdkKey: string) {\n    this.client = configcat.createClient(sdkKey);\n  }\n\n  public static getInstance(sdkKey: string): any {\n    if (!ConfigCatClient.instance) {\n      ConfigCatClient.instance = new ConfigCatClient(sdkKey);\n    }\n    return ConfigCatClient.instance;\n  }\n\n  public async getFeature(featureName: string) {\n    return this.client.getValueAsync(featureName);\n  }\n}\n\nexport default ConfigCatClient;\n","import { useState, useEffect } from 'react';\nimport ConfigCatClient from 'app/services/ConfigCatClient';\n\nconst useIsFeatureActivated = (featureName: string) => {\n  const [isFeatureActivated, setIsFeatureActivated] = useState(false);\n  const configCatSdkKey = process.env.REACT_APP_CONFIGCAT_SDK_KEY;\n  const configCatClient = configCatSdkKey && ConfigCatClient.getInstance(configCatSdkKey);\n\n  useEffect(() => {\n    async function handleFeatureStatus() {\n      if (configCatClient) {\n        const feature = await configCatClient.getFeature(featureName);\n        setIsFeatureActivated(feature);\n      }\n    }\n    handleFeatureStatus();\n  }, [configCatClient, featureName]);\n\n  return isFeatureActivated;\n};\n\nexport default useIsFeatureActivated;\n","import React from 'react';\nimport logo from 'assets/img/logo.png';\nimport './Maintenance.css';\n\nconst MaintenancePage = () => (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      <img src={logo} className=\"App-logo\" alt=\"logo\" />\n      <p>Exorde application is currently under development.</p>\n    </header>\n  </div>\n);\n\nexport default MaintenancePage;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport { FEATURES } from 'app/constants';\nimport { useIsFeatureActivated } from 'app/hooks';\nimport MaintenancePage from 'pages/maintenance';\n\nconst App = () => {\n  const loginFeature = useIsFeatureActivated(FEATURES.LOGIN);\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" component={MaintenancePage} />\n        {loginFeature && <Route exact path=\"/login\" component={MaintenancePage} />}\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}